<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gaoliang.me</id>
    <title>高亮的杂货铺</title>
    <updated>2020-04-26T13:26:34.398Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gaoliang.me"/>
    <link rel="self" href="https://gaoliang.me/atom.xml"/>
    <subtitle>Do what you love. Do have faith in what you are doing.</subtitle>
    <logo>https://gaoliang.me/images/avatar.png</logo>
    <icon>https://gaoliang.me/favicon.ico</icon>
    <rights>All rights reserved 2020, 高亮的杂货铺</rights>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-经典垃圾回收器]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-jing-dian-la-ji-hui-shou-qi/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-jing-dian-la-ji-hui-shou-qi/">
        </link>
        <updated>2020-03-15T10:10:00.000Z</updated>
        <content type="html"><![CDATA[<p>封面图为七种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用</p>
<h2 id="serial收集器新生代">Serial收集器【新生代】</h2>
<p><img src="https://gaoliang.me/post-images/1584267165324.png" alt="" loading="lazy"><br>
图为ParNew/Serial Old收集器运行示意图<br>
最老的单线程收集器，使用标记-复制算法，会Stop The World，但他目前仍然是HotSpot在客户端模式下的默认新生代收集器。在客户端模式下是一个不错的选择。</p>
<h2 id="serial-old收集器-老年代">Serial Old收集器 【老年代】</h2>
<p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。</p>
<h2 id="parnew收集器新生代">ParNew收集器【新生代】</h2>
<p><img src="https://gaoliang.me/post-images/1584267289522.png" alt="" loading="lazy"><br>
图为ParNew/Serial Old收集器运行示意图<br>
除了支持多线程并行收集之外，并没有太多创新之处。 这个收集器可以和CMS收集器一起工作，后来ParNew合并入了CMS</p>
<h2 id="parallel-scavenge收集器新生代">Parallel Scavenge收集器【新生代】</h2>
<p>Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是<br>
能够并行收集的多线程收集器。 相对于ParNew收集器，特点是他的目标不是尽可能的缩短垃圾收集时用户线程的停顿时间，而是达到一个可控制的吞吐比，所谓吞吐比就是处理器用于运行用户代码与处理器总消耗时间的比值。 主要适合用于在后台运算而不需要太多交互的分析任务。</p>
<h2 id="parallel-old收集器老年代">Parallel Old收集器【老年代】</h2>
<p>Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。</p>
<h2 id="cms收集器concurrent-mark-sweep老年代">CMS收集器（Concurrent Mark Sweep）【老年代】</h2>
<p><img src="https://gaoliang.me/post-images/1584278232152.png" alt="" loading="lazy"><br>
CMS收集器的目标是获取最短回收停顿时间。 从名字就可以看出采用的是标记清除算法。<br>
他的过程包括四部</p>
<ol>
<li>初始标记</li>
<li>并发标记</li>
<li>重新标记</li>
<li>并发清除</li>
</ol>
<p>其中，并发标记重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快；并发标记阶段就是从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行；而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录<br>
最后是并发清除阶段，清理删除掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。</p>
<p>CMS收集器无法处理&quot;浮动垃圾“，即在并发标记和并发清理阶段，产生的新的垃圾对象。</p>
<p>同样，也正是因为没法处理”浮动垃圾“，CMS就不能等待到老年代完全被填满了再进行垃圾回收，必须要预留一部分空间给用户线程使用。在JDK5中，当老年代使用了68%的空间后，到了JDK6，被调整到了92%，如果在运行时发生了无法分配内存给用户线程的情况，则不得不启动后背预案，冻结用户线程的执行，临时启用Serial Old处理器来进行老年代的垃圾收集，但是这样的话，停顿的时间就很常了。</p>
<p>此外，由于采用的是标记-清除的算法，还会导致大量空间碎片的产生。空间碎片过多时，就有可能导致大对象无法进行分配，从而导致不能不提前进行一次 Full GC。 为了解决这个问题，CMS提供了一个参数，可以在被迫Full GC的时候，开启内存碎片的合并整理。</p>
<h2 id="garbage-first收集器">Garbage First收集器</h2>
<p><img src="https://gaoliang.me/post-images/1584280749522.png" alt="" loading="lazy"><br>
G1收集器基于”停顿时间模型“的收集器，可以支持指定一个长度为M毫秒的时间片对内，消耗在垃圾收集上的时间大概率不超过N毫秒这样的支持。</p>
<p>G1收集器属于Mixed GC模式，它可以面向堆中的任意一个部分来组成回收集（Collection Set)。 衡量标准不再是它属于哪个分代，而是在哪块内存中存放的垃圾数量最多，回收收益组大。</p>
<p>G1也仍然遵循分代收集理论，但其不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region)，每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。 收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象，还是已经存活了一段时间，熬过多次收集的旧对象，都能获取很好的收集效果。</p>
<p>Region中还有一类特殊的Humongous区域，专门用来存储大对象，G1认为只要大小超过了一个Region容量一般的对象，就应该被视为大对象。 每个Region的大小可以通过参数进行设定。 如果对象大小超过了一个Region，则会被存放在N个连续的Humongous Region中。 G1把Humangous Regions视作老年代的一部分来看带。</p>
<p>G1收集器之所以能建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间（使用参数-XX：MaxGCPauseMillis指定，默认值是200毫秒），优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。</p>
<h3 id="g1收集器如何解决跨region引用对象">G1收集器如何解决跨Region引用对象？</h3>
<p>通过卡表来实现。每个Region都维护自己的记忆集。Region的记忆集相对较为复杂，因为他要存储的并不只有老年代，而是其他所有的Region，所以他是一个hash结构，key为其他Region的起始地址，value是一个结合，存储的是卡表的索引号。即需要同时记录我指向了谁，又要记录谁指向了我。 同样，这种卡表也到只了G1收集器有着更高的内存负担。根据经验，G1至少要消耗大约Java堆10%到20%的额外内存来维持收集器工作。</p>
<h3 id="在并发标记阶段如何保证收集器线程与用户线程互不干扰的运行">在并发标记阶段，如何保证收集器线程与用户线程互不干扰的运行？</h3>
<p>一是要保证不能打破原来的对象图结构，这在上一篇中说过，其中CMS采用的是增量更新算法实现，而G1收集器使用的是原始快照（SATB）算法来实现的。 此外，对于用户线程新创建对象的内存分配，G1为每一个Region设计了两个名为TAMS（Top at Mark Start)的指针，把Region的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针范围内。 G1默认在这两个地址以上的对象是被默认标记过的，即默认他们是存活的，不纳入回收范围。</p>
<p>和CMS类似，如果创建的新对象没有空间分配，也会导致G1收集器强迫冻结用户线程执行，导致Full GC而产生长时间的”Stop The World“</p>
<p>G1收集器的运作大致可以分为四个步骤</p>
<ol>
<li>初始标记： 标记GC Roots能够直接关联的对象，并修改TAMS指针的值，让下一个阶段并发运行时，能够在可用的Region内分配新对象。</li>
<li>并发标记：从GC Roots出发，对堆中的对象进行可达性分析，递归扫描整个堆里的对下个图，并找出要回收的对象，这个阶段耗时较长，但是可以与用户程序并发执行。 当对象图扫描完成后，还需要重新处理SATB记录下的在并发时有引用变动的对象。</li>
<li>最终标记：对用户线程做一个短暂的暂停，用户处理并发标记结束后仍然遗留的那一部分SATB记录。</li>
<li>筛选回收：负责更新Region的统计数据，堆各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来指定回收计划，可以自由选择任意多个Region构成回收集，然后决定回收的那一部分Region的存活对象复制到空的Region里，再清理掉整个旧的Region的全部空间，这里涉及到存活对象的移动，是必须暂停用户线程的。</li>
</ol>
<p>G1从整体上来看，是基于标记整理算法的，但是从局部上来看，是基于标记复制算法来实现的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-HotSpot垃圾收集算法细节，根节点枚举和可达性分析]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-hotspot-la-ji-shou-ji-suan-fa-xi-jie-gen-jie-dian-mei-ju-he-ke-da-xing-fen-xi/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-hotspot-la-ji-shou-ji-suan-fa-xi-jie-gen-jie-dian-mei-ju-he-ke-da-xing-fen-xi/">
        </link>
        <updated>2020-03-15T08:35:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="根节点枚举">根节点枚举</h2>
<p>可达性分析需要从GC Roots集合找引用链。固定可以作为GC Roots的节点主要是全局性的引用、例如常量和非静态属性，以及执行上下文，即栈帧的本地变量表中。</p>
<p>迄今为止，所有的收集器在根节点枚举这一个步骤都是必须要暂停用户线程的，因此毫无疑问根节点枚举也会有“Stop The World”的困扰。 现在可达性分析算法在查找引用链这个过程已经可以做到和用户线程并发了，但是枚举跟节点这个步骤不行。 因为枚举根节点必须在一个能保障一致性的快照中进行的。 这里一致性指的是整个枚举期间执行子系统看起来就像是被冻结到了某个时间点了，不会出现在分析过程中，根节点上的对象引用关系还在不断变化的情况。 否则将会无法保证分析结果的准确性。</p>
<p>显然，直接进行遍历是消耗极高的行为，必须进行优化。</p>
<p>目前主流的Java虚拟机都是使用的准确式垃圾收集，所以当线程停顿后，并不需要检查上下文和全局中的所有引用位置，虚拟机应该有办法能够直接知道哪里存放着对象的引用。 在HotSpot里，是用一组称为OopMap的数据结构来达到这个目的的，一单类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么数据类型计算出来。 这样垃圾收集器在扫描时就可以直接得知这些信息了，并不需要真正的一个不漏的从方法区GC Roots开始查找。</p>
<h2 id="安全点">安全点</h2>
<p>何时生成OopMap?  显然不能每条指令都生成，这回导致大量的额外存储空间。 实际上HotSpot只会在特定的位置生成OopMap，这种位置被称为安全点。一般安全点位置的选取基本上是遵循“是否能够让程序长时间执行的特征”为标准的，因此，一般会在方法调用、循环跳转、异常跳转等指令时，才会产生安全点。</p>
<p>安全点的定义有了，还有一个问题就是如何在垃圾回收时，让所有的线程都在最近的的安全点停下来。<br>
目前主要采用两种方案，抢先式中断和主动式终端，抢先式终端不需要线程的执行代码进行配合，在垃圾回收时，系统首先让所有的用户线程终端，然后如果发现有线程终端点不在安全点上，就恢复这个线程，让他一会再重新终端，直到跑到安全点上，目前基本没有虚拟机采用抢先式中段来暂停线程响应GC事件。</p>
<p>主动式终端是在垃圾回收需要中断线程的时候，不对线程操作，而是仅仅设置一个标志位，各个线程执行的时候要不断的轮询这个标志位，一但发现中断标志为真，那就自己在最近的安全点上主动挂起。</p>
<p>因为轮询需要频繁出现，因此必须足够高效，HotSpot通过内存保护陷阱的方式，将操作精简到了一条汇编指令。</p>
<h2 id="安全区域">安全区域</h2>
<p>如果一个线程在垃圾回收发生时，正处于sleep或者阻塞状态，就必须要引入安全区域来解决这种情况。<br>
安全区域是指的能确保在某一段代码片段中，引用关系不会发生变化。 因此在这个区域内任意地方开始垃圾收集都是安全的。</p>
<p>当用户线程执行到安全区域里的代码时，首先会标识自己已经进入了安全区域，这时候垃圾收集就不需要关心这个线程了，当线程要离开这个区域的时候，必须要检查虚拟机是否已经完成了根节点枚举。如果完成了，就继续执行，否则，就要阻塞知道收到离开安全区域的信号。</p>
<h2 id="记忆集与卡表">记忆集与卡表</h2>
<p>为了解决跨代引用的问题，垃圾收集器在新生代中建立了记忆集的结构，以避免整个老年代都被加进 GC Roots的扫描范围。 事实上，并不仅是新生代和老年代之间才存在跨代引用，所有涉及到分区域收集的收集器，都会有相同问题。</p>
<p>记忆集通常不会直接记录所有存在跨代引用的对象，而是通过卡表的方式，更粗粒度的记录哪一个范围的非收集区域存在指向收集区域的指针就可以了。</p>
<p>卡表就是一种常见的记忆集实现形式， 卡表的每一项元素都对应着内存区域中一块特定大小的内存块，这个内存块被称为卡页，一把来说，卡页大小都是2的N此幂。 卡表一般都设计成一个字节数组。<br>
<img src="https://gaoliang.me/post-images/1584264190400.png" alt="" loading="lazy"><br>
一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty）。</p>
<h2 id="写屏障">写屏障</h2>
<p>通过上面的方式，已经解决了GC Roots扫描范围的问题。 但是卡表谁来维护呢？<br>
HotSpot虚拟机是通过写屏障（Write Barrier）技术来维护卡表状态的。 写屏障可以看作是虚拟机层面堆引用类型字段赋值这个操作的AOP切面，在引用对象赋值时会产生一个环形通知，供程序执行二外的动作。</p>
<h2 id="并发的可达性分析">并发的可达性分析</h2>
<p>并发的可达性分析可能会导致两个问题，一种是把原本消亡的对象错误标记为存活，这不是好事，但其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了，程序肯定会因此发生错误。<br>
<img src="https://gaoliang.me/post-images/1584265987274.png" alt="" loading="lazy"></p>
<p>Wilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色：</p>
<ul>
<li>赋值器插入了一条或多条从黑色对象到白色对象的新引用；</li>
<li>·赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。<br>
为了解决这种问题， 只要破坏这两个条件中的任意一个即可，因而出现了两种解决方案，增量更新和原始快照。</li>
</ul>
<p>增量更新主要是破坏第一个条件，新增引用时，将引用记录下来，当并发扫描结束后，再将这些记录过的引用为根，重新扫描一次。</p>
<p>原始快照主要是破坏第二个条件，当灰色对象要删除指向白色对象的引用的时候，就将这个要删除的引用记录下来，在并发扫描结束后，再重新将这些记录过的引用关系为跟，重新扫描一遍。 即手动恢复到开始扫描那一刻的快照图进行搜索。</p>
<p>CMS是基于增量跟新的，G1和Shenandoah是基于原始快照的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-HotSpot垃圾收集算法细节]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-hotspot-la-ji-shou-ji-suan-fa-xi-jie/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-hotspot-la-ji-shou-ji-suan-fa-xi-jie/">
        </link>
        <updated>2020-03-15T08:35:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="根节点枚举">根节点枚举</h2>
<p>可达性分析需要从GC Roots集合找引用链。固定可以作为GC Roots的节点主要是全局性的引用、例如常量和非静态属性，以及执行上下文，即栈帧的本地变量表中。</p>
<p>迄今为止，所有的收集器在根节点枚举这一个步骤都是必须要暂停用户线程的，因此毫无疑问根节点枚举也会有“Stop The World”的困扰。 现在可达性分析算法在查找引用链这个过程已经可以做到和用户线程并发了，但是枚举跟节点这个步骤不行。 因为枚举根节点必须在一个能保障一致性的快照中进行的。 这里一致性指的是整个枚举期间执行子系统看起来就像是被冻结到了某个时间点了，不会出现在分析过程中，根节点上的对象引用关系还在不断变化的情况。 否则将会无法保证分析结果的准确性。</p>
<p>显然，直接进行遍历是消耗极高的行为，必须进行优化。</p>
<p>目前主流的Java虚拟机都是使用的准确式垃圾收集，所以当线程停顿后，并不需要检查上下文和全局中的所有引用位置，虚拟机应该有办法能够直接知道哪里存放着对象的引用。 在HotSpot里，是用一组称为OopMap的数据结构来达到这个目的的，一单类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么数据类型计算出来。 这样垃圾收集器在扫描时就可以直接得知这些信息了，并不需要真正的一个不漏的从方法区GC Roots开始查找。</p>
<h2 id="安全点">安全点</h2>
<p>何时生成OopMap?  显然不能每条指令都生成，这回导致大量的额外存储空间。 实际上HotSpot只会在特定的位置生成OopMap，这种位置被称为安全点。一般安全点位置的选取基本上是遵循“是否能够让程序长时间执行的特征”为标准的，因此，一般会在方法调用、循环跳转、异常跳转等指令时，才会产生安全点。</p>
<p>安全点的定义有了，还有一个问题就是如何在垃圾回收时，让所有的线程都在最近的的安全点停下来。<br>
目前主要采用两种方案，抢先式中断和主动式终端，抢先式终端不需要线程的执行代码进行配合，在垃圾回收时，系统首先让所有的用户线程终端，然后如果发现有线程终端点不在安全点上，就恢复这个线程，让他一会再重新终端，直到跑到安全点上，目前基本没有虚拟机采用抢先式中段来暂停线程响应GC事件。</p>
<p>主动式终端是在垃圾回收需要中断线程的时候，不对线程操作，而是仅仅设置一个标志位，各个线程执行的时候要不断的轮询这个标志位，一但发现中断标志为真，那就自己在最近的安全点上主动挂起。</p>
<p>因为轮询需要频繁出现，因此必须足够高效，HotSpot通过内存保护陷阱的方式，将操作精简到了一条汇编指令。</p>
<h2 id="安全区域">安全区域</h2>
<p>如果一个线程在垃圾回收发生时，正处于sleep或者阻塞状态，就必须要引入安全区域来解决这种情况。<br>
安全区域是指的能确保在某一段代码片段中，引用关系不会发生变化。 因此在这个区域内任意地方开始垃圾收集都是安全的。</p>
<p>当用户线程执行到安全区域里的代码时，首先会标识自己已经进入了安全区域，这时候垃圾收集就不需要关心这个线程了，当线程要离开这个区域的时候，必须要检查虚拟机是否已经完成了根节点枚举。如果完成了，就继续执行，否则，就要阻塞知道收到离开安全区域的信号。</p>
<h2 id="记忆集与卡表">记忆集与卡表</h2>
<p>为了解决跨代引用的问题，垃圾收集器在新生代中建立了记忆集的结构，以避免整个老年代都被加进 GC Roots的扫描范围。 事实上，并不仅是新生代和老年代之间才存在跨代引用，所有涉及到分区域收集的收集器，都会有相同问题。</p>
<p>记忆集通常不会直接记录所有存在跨代引用的对象，而是通过卡表的方式，更粗粒度的记录哪一个范围的非收集区域存在指向收集区域的指针就可以了。</p>
<p>卡表就是一种常见的记忆集实现形式， 卡表的每一项元素都对应着内存区域中一块特定大小的内存块，这个内存块被称为卡页，一把来说，卡页大小都是2的N此幂。 卡表一般都设计成一个字节数组。<br>
<img src="https://gaoliang.me/post-images/1584264190400.png" alt="" loading="lazy"><br>
一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty）。</p>
<h2 id="写屏障">写屏障</h2>
<p>通过上面的方式，已经解决了GC Roots扫描范围的问题。 但是卡表谁来维护呢？<br>
HotSpot虚拟机是通过写屏障（Write Barrier）技术来维护卡表状态的。 写屏障可以看作是虚拟机层面堆引用类型字段赋值这个操作的AOP切面，在引用对象赋值时会产生一个环形通知，供程序执行二外的动作。</p>
<h2 id="并发的可达性分析">并发的可达性分析</h2>
<p>并发的可达性分析可能会导致两个问题，一种是把原本消亡的对象错误标记为存活，这不是好事，但其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了，程序肯定会因此发生错误。<br>
<img src="https://gaoliang.me/post-images/1584265987274.png" alt="" loading="lazy"></p>
<p>Wilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色：</p>
<ul>
<li>赋值器插入了一条或多条从黑色对象到白色对象的新引用；</li>
<li>·赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。<br>
为了解决这种问题， 只要破坏这两个条件中的任意一个即可，因而出现了两种解决方案，增量更新和原始快照。</li>
</ul>
<p>增量更新主要是破坏第一个条件，新增引用时，将引用记录下来，当并发扫描结束后，再将这些记录过的引用为根，重新扫描一次。</p>
<p>原始快照主要是破坏第二个条件，当灰色对象要删除指向白色对象的引用的时候，就将这个要删除的引用记录下来，在并发扫描结束后，再重新将这些记录过的引用关系为跟，重新扫描一遍。 即手动恢复到开始扫描那一刻的快照图进行搜索。</p>
<p>CMS是基于增量跟新的，G1和Shenandoah是基于原始快照的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-垃圾回收概念]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-la-ji-hui-shou-gai-nian/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-la-ji-hui-shou-gai-nian/">
        </link>
        <updated>2020-03-15T07:28:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分代收集理论">分代收集理论</h2>
<p>分代收集理论是建立在经验法则上的，基于两个假说</p>
<ol>
<li>若分代假说：绝大多数对象都是照生夕灭的</li>
<li>强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡<br>
设计者一般把Java堆划分为新生代和老年代两个区域，因而才有了“Minor GC”,&quot;Major GC&quot;, &quot;Full GC&quot;等分类类型的划分。</li>
</ol>
<p>假如现在要进行一次只局限于新生代区域的GC，但新生代内存中的对象是完全有可能被老年代所持有的，为了找到该区域存活的对象，不得不在固定的GC Roots之外，再额外遍历一遍整个老年代来确定正确性，反之也要一样，但是这无疑导致了很大的性能负担。 因此，为了解决这个问题，就需要对分代收集理论添加第三条经验法则：<br>
3. 跨代引用假说：跨代引用相对于同代引用来说，仅占极少数</p>
<p>依据这个假说，我们就不应该再为了少量的跨代引用区扫描整个老年代了，也不必浪费空间专门记录每个对象是否存在以及存在哪些跨代引用，只需要再新生代上建立一个全局的数据结构（记忆集，Remebered Set），这个结构把老年代划分为螺杆个小块，标识出老年代中哪一块内存会存在跨代引用，此后发生Minor GC时间，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots中进行扫描。虽然这种方法需要在对象改变引用关系时，维护记录数据的正确性，而导致一部分运行时开销，但是相较于扫描整个老年代老说还是更划算的。</p>
<p>定义：</p>
<ul>
<li>新生代收集（Minor GC/Young GC): 指的目标是只是新生代的收集</li>
<li>老年代收集（Major GC/Old GC): 只目标只是老年代的收集，目前只有CMS收集器会有单独收集老年代的行为。</li>
<li>混合收集（Mixed GC): 指的是收集整个新生代以及部分老年代的垃圾收集，目前只有G1收集器会有这种行为</li>
<li>整堆收集（Full GC): 收集整个Java堆和<strong>方法区</strong>的垃圾收集</li>
</ul>
<h2 id="标记-清除算法">标记-清除算法</h2>
<p>最基础的收集算法， 首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。</p>
<p>回导致内存不连续。</p>
<h2 id="标记复制算法">标记复制算法</h2>
<p>将内存空间分为两块，标记之后直接将存货的对象复制到新的空间，再把已使用过的一半空间直接清空。<br>
由于新生代中的对象大部分都熬不过第一轮收集， 因此并不需要按照1：1的比例来划分新生代的内存空间，以减少浪费。</p>
<p>因此，提出了一种新的半区复制分代策略，现在称之为“Appel式”回收 HotSpot虚拟机的Serial、ParNew等新生代收集器均采用这种策略。</p>
<p>具体做法是，将新生代划分为Eden空间和两块较小的Survivor空间，每次复制只使用Eden空间和其中一块Survivor。 发生垃圾收集时，将Eden和Survivor中仍然存活的对象一次复制到另一块Survivor空间上，然后直接清理掉Eden和已经使用过的那一块Survivor空间。 HotSpot虚拟机默认的Eden和Survivor的大小比例是8：1，即每次新生代中可以用内存空间为整个新生代空间的90%，只有一个Survivor空间，即10%的新生代是被浪费的。但是这是根据经验法则来设定的，存在一种情况的安全设计，例如当Survivor空间不足以容纳一次Minor GC后存活的对象时，就需要以来其他内存区域（实际上大多是老年代）来进行分配担保。</p>
<h2 id="标记整理算法">标记整理算法</h2>
<p>在标记之后将存活的对象重新排列。 但是这种操作是一种很重的操作，需要暂停全部用户应用程序才能进行。 “Stop The World”。这样提高了回收时的复杂度，但是降低了对象内存分配时的复杂度。 对象分配的频率是一般是高于垃圾收集频率的。  HotSpot里，Parallel Scavenge收集器是基于标记-整理算法的，关注延迟的CMS是基于标记清楚算法的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-HotSpot虚拟机对象]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-hotspot-xu-ni-ji-dui-xiang/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-hotspot-xu-ni-ji-dui-xiang/">
        </link>
        <updated>2020-03-15T07:00:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="当我们写下一个new关键字时发生了什么">当我们写下一个new关键字时，发生了什么？</h2>
<p>虚拟机遇到一个new指令时，先会去检查这个指令的参数是否能够在常量池中定位到一个类的符号引用，然后检查这个类是否被加载、解析和初始化过，如果没有，那么执行该过程。</p>
<p>检查通过后，虚拟机要为新生对象分配内存，内存的大小在类加载完成的时候就已经可以完全确定了，所以内存分配的任务是把等同于对象大小的一块内存从Java堆中划分出来。</p>
<p>此时需要考虑一个问题，由于对象创建是一个非常频繁的行为，即使仅仅是修改一个指针的位置，在并发情况下也并不是线程安全的。对于这种情况，通常由两种可选方案，一种是通过CAS配合重试保证更新操作的原子性，另一种则是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中都预先分配一小块内存，称之为本地线程分配缓冲（ThreadLocal Allocation Buffer, TLAB），哪个线程需要分配内存时，优先在TLAB中分配，只有本地缓冲区用完了，分配新的缓冲区时，才需要同步锁定，可以通过JVM参数来决定是否使用TLAB。</p>
<p>接下来对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的GC分代年龄等信息，这些信息存放在对象的对象头中。 根据虚拟机当前运行状态的不同，例如是否使用偏向锁等，对象头会由不同的设置方式。</p>
<p>此时，所有的字段都是默认的初始值。new指令之后会接着调用<code>&lt;init&gt;()</code>方法，按照程序员的意愿对对象进行初始化。</p>
<h2 id="对象的内存布局">对象的内存布局</h2>
<p>在HotSpot虚拟机中，对象代内存中的存储布局可以划分为三个部分，对象头（Header），实例数据（Instance Data）和对齐填充（Padding）。</p>
<p>对象头部分包括两类信息，第一类是用于存储对象自身的运行时数据，例如HashCode, GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等，这部数据的长度在32位和64位虚拟机中，分别为32个bit和64个bit，官方称之为“Mark Word”。 对象要存储的运行时数据很多，其实已经超过了32、64位Bitmap结构的空间效率，Mark Word被设计成一个有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，会根据对象的状态复用自己的存储空间。</p>
<p>对象头的另一个部分是类型指针，即对象指向他的类型元数据的指针，Java虚拟机通过这个指针来确定对象是哪个类的实例。 并不是所有的虚拟机实现都必须保留类型指针，例如通过句柄来实现的，就不需要。 此外，如果对象是一个Java数组，那么在对象头中还必须要有一块记录数组长度的数据。</p>
<p>对象头之后是对象真正存储的有效信息，即程序代码里所定义的各个类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录下来。</p>
<p>第三部分是对齐填充，这并不是必然存在的，也没有特别的含义，仅仅是起着占位符的作用。 HotSpot虚拟机内存管理要求对象的启始地址必须是8的整数倍，所以任何对象的大小都必须是8的整数倍。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-方法调用与虚方法表]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-fang-fa-diao-yong-yu-xu-fang-fa-biao/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-fang-fa-diao-yong-yu-xu-fang-fa-biao/">
        </link>
        <updated>2020-03-15T05:47:44.000Z</updated>
        <content type="html"><![CDATA[<p>JVM字节码中，共有五种指令来实现方法的调用</p>
<ol>
<li>invokevirtual 为最常见的情况，用于调用所有的虚方法</li>
<li>invokespecial 是作为对 private 和构造方法<code>&lt;init&gt;()</code>的调用，以及父类中的方法的调用</li>
<li>invokeinterface 的实现跟 invokevirtual 类似，用于调用接口方法，会在运行时再确定一个实现该接口的对象。</li>
<li>invokestatic 是对静态方法的调用。</li>
<li>invokedynamic 先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法</li>
</ol>
<h2 id="解析调用">解析调用</h2>
<p>我们知道，在class文件中，所有的方法调用都是一个常量池中的符号引用。 在类的解析阶段，会将其中的一部分符号引用转换为直接引用，这种解析能够成立的前提是方法在真正运行之前就有一个可确定的调用版本，并且这个版本是在运行期间不可变的。 这类方法的调用被称为解析（Resolution）</p>
<p>使用invokestaic和invokespecial指令调用的方法，都是可以在class文件的解析阶段中确定唯一的调用版本的，java语言中符合这种条件的方法一共有四种，包括静态方法，私有方法，实例方法，父类方法。非此四类方法会存在多态的情况，因此无法在解析阶段就确定方法的唯一调用版本。</p>
<p>除了被invokestatic和invokespecial指令调用的方法外，还有被final修饰的方法，因为其无法被继承，所以也可以被解析调用。但是final方法是使用invokevirtual指令进行调用的。</p>
<p>解析调用是一个静态的过程，在编译期间就可以完全确定，在类加载的阶段会把涉及到的符号引用完全转换为明确的直接引用，无需延迟到运行期间进行动态处理。</p>
<h2 id="动态分派dispatch">动态分派（Dispatch）</h2>
<p>因为Java是一门面向对象的程序语言，所以具有继承、封装、多态三个特征，分派调用过程就是多态性的提现。</p>
<h3 id="静态分派">静态分派</h3>
<p>首先要理解静态类型和实际类型的关系</p>
<pre><code class="language-java">class Human{};
class Man extends Human{};
Human man = new Man();
</code></pre>
<p>在上述代码中，Human被成为man的静态类型，而Man则是man的实际类型。静态类型在编译期间是可知的，但是实际类型在编译期间是不可知的，例如下面这个例子</p>
<pre><code class="language-java">Human human = (new Random()).nextBoolean() ? new Man() : new Woman();
public static sayHello(Human human){human.sayHello();}
public static sayHello(Man man){man.sayHello();}
public static sayHello(Woman woman){woman.sayHello();}
</code></pre>
<p>编译期间，编译器会根据对象的静态类型去选择使用方法的哪个重载版本，在上述方法中，如果我们调用<code>sayHello(human)</code>，必定是调用的父类Human的sayHello方法，因为javac编译器会根据静态类型选择合适的重载版本。</p>
<h3 id="动态分派">动态分派</h3>
<p>动态分派主要体现在方法重写(Overide)上。</p>
<pre><code class="language-java">public class DynamicDispatch {
    static abstract class Human {
        protected abstract void sayHello();
    }
    static class Man extends Human {
        @Override
        protected void sayHello() {
            System.out.println(&quot;man say hello&quot;);
        }
    }
    static class Woman extends Human {
        @Override
        protected void sayHello() {
            System.out.println(&quot;woman say hello&quot;);
        }
    }
    public static void main(String[] args) {
        Human man = new Man();
        Human woman = new Woman();
        man.sayHello();
        woman.sayHello();
        man = new Woman();
        man.sayHello();
    }
}
</code></pre>
<p>这个例子，最终会输出</p>
<pre><code class="language-bash">man say hello
woman say hello
woman say hello
</code></pre>
<p>这是由于，此时选择方法的调用版本时，不在是根据静态类型来决定的，而是根据实际类型。<br>
查看这个方法的字节码，可以发现调用sayHello方法时间，生成的字节码是invokevirtual，invokevirual方法并不是把常量池中方法的符号引用解析到直接引用上就结束了，还会根据方法接收者的实际类型来选择方法版本，这就是Java语言中方法重写的本质。<br>
invokevirutal指令运行时解析的过程大概分为四个步骤</p>
<ol>
<li>找到操作数栈顶的第一个元素所指向的实际类型，计做C</li>
<li>如果在类型C中找到了与常量的描述符和简单方法都相符的方法，则进行权限校验，通过则返回引用，查找结束，否则返回<code>java.lang.IllegalAccessError</code>异常。</li>
<li>否则，按照继承关系从下往上查找C的各个父类进行第二步的搜索验证</li>
<li>如果没有找到合适的方法，则抛出<code>java.lang.AbstarctMethodError</code>异常</li>
</ol>
<p>字段是没有多态性的</p>
<h3 id="虚拟机动态分配的实现">虚拟机动态分配的实现</h3>
<p>动态分派是一个非常频繁的动作，而且动态分派需要在接收者类型的方法元数据中搜索合适的目标方法，因此Java虚拟机为了优化性能，运行时一般不会如此品牌的搜索类型元数据。</p>
<p>通常，会通过建立一个虚方法表的方式，使用虚方法表索引来代替元数据查找以提高性能。<br>
虚方法表中存放着各个方法的实际入口地址。如果某个方法在子类中没有被重写，那子类的虚方法表中的地址入口和父类相同方法的地址入口是一致的，都指向父类的实现入口。如果子类中重写了这个方法，子类虚方法表中的地址也会被替换为指向子类实现版本的入口地址。虚方法表一般在类加载的连接阶段进行初始化，准备了类的变量初始值后，虚拟机会把该类的虚方法表也一同初始化完毕。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-运行时栈帧结构]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-yun-xing-shi-zhan-zheng-jie-gou/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-yun-xing-shi-zhan-zheng-jie-gou/">
        </link>
        <updated>2020-03-14T10:58:47.000Z</updated>
        <content type="html"><![CDATA[<p>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用开始至执行结束的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。在编译Java程序源码的时候，栈帧中需要多大的局部变量表，需要多深的操作数栈就已经被分析计算出来，并且写入到方法表的Code属性之中。</p>
<p>一个线程中的方法调用链可能会很长，从Java程序的角度看，同一时刻，同一个线程里，在调用堆栈的所有方法都同时处于执行状态。但是对于JVM的执行引擎来说，在活动线程中，只有位于栈顶的方法才是生效的，被称作当前栈帧(Current Stack Frame),与这个栈帧所关联的方法被称作当前方法，执行引擎所运行的所有字节码指令都是针对当前栈帧。<br>
<img src="https://gaoliang.me/post-images/1584183796083.png" alt="" loading="lazy"></p>
<h2 id="局部变量表local-variables-table">局部变量表（Local Variables Table）</h2>
<p>局部变量表是以组变量值的存储空间，用于存放方法参数和方法内部定义的局部变量，在Java程序被编译为class文件时，就在方法的Code属性的max_locals数据项中明确了该方法所需要的局部变量表的最大容量。</p>
<p>局部变量表的容量以变量槽（Variable Slot）为最小单位，每个变量槽都应该能存放一个boolean、byte、char、short、int、float、reference或returnAddress类型的数据。所以大多数虚拟机使用32位长度来作为一个槽的大小，但是虚拟机规范并没有明确说明槽的大小。</p>
<p>reference表示对一个对象实例的引用，虚拟机规范并没有说明他的长度，也没有明确指出这种引用应有什么样的结构。 但是一般要求至少通过这个引用可以获取数据存放的起始地址以及这个对象所属的数据类型在方法区中存储的类型信息。 returnAddress类型已经很少见了。</p>
<p>Java虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从0开始至局部变量表的最大的变量槽地址，如果是32位数据，则索引N代表使用第N个变量槽，如果是64位的数据，则说明会同时使用N和N+1两个变量槽。</p>
<p>当一个方法被调用时，Java虚拟机会使用局部变量表来完成参数值到参数变量表列表的传递过程，即实参到形参的传递。如果是实例方法，那么局部变量表的第0位索引是this对象本身的引用，其余参数按照参数表顺序排列，占用从1开始的局部变量槽，参数表分配完成后，再根据方法体内定义的变量顺序和作用域分配其他的变量槽。</p>
<p>为了尽可能的节省栈帧的内存空间，局部变量表中的变量槽是可以重用的，当当前字节码PC计数器的值已经超过了某个变量的作用域，那么这个变量对应的槽就可以交给其他变量来重用。</p>
<p>还有一点需要注意的是，局部变量不像类变量一样存在准备阶段。</p>
<h2 id="操作数栈operand-stack">操作数栈（Operand Stack）</h2>
<p>操作数栈是一个后入先出的栈，和局部变量表一样，他的最大深度也是在编译时就被写道Code属性的max_stacks数据项中的。 操作数栈的每一个元素都可以是包括long和double在内的任意java数据类型，32位数据类型占据1个栈容量，64位占据2个栈容量。</p>
<h2 id="动态连接dynamic-linking">动态连接（Dynamic Linking）</h2>
<p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。</p>
<h2 id="方法返回地址">方法返回地址</h2>
<p>当一个方法开始执行之后，只有两种方式退出这个方法，一个是执行引擎遇到任意一个方法返回的字节码指令，这时候可能会有返回值传递给上层的方法调用者，这种退出方式称为正常调用完成。</p>
<p>另外一种退出方法是在内部执行的过程中遇到了异常，而且这个异常没有在方法体内得到妥善的处理。 一个方法以异常完成出口的方式退出，是不会给他的上层调用者任何返回值的。</p>
<p>无论任何方式退出，在退出之后，都必须要返回到最初方法被调用的地方，程序才能继续执行。方法返回时可能需要再栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态，一般来说，方法正常退出时，主调方法的PC计数器的值就可以作为返回地址，栈帧中很可能会保存这个计数器值。而方法异常退出时，返回地址是由异常处理器表来确定的，栈帧中一般不会保存这部分信息。</p>
<p>方法退出的过程等同于把当前栈帧出栈，因此退出时可能的操作由：恢复上层方法的局部变量表和操作数量栈，将返回值压入调用栈帧的操作数栈中，调整pc计数器的值以指向调用指令后面的一条指令等。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-类加载器]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-lei-jia-zai-qi/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-lei-jia-zai-qi/">
        </link>
        <updated>2020-03-14T09:47:32.000Z</updated>
        <summary type="html"><![CDATA[<p>Java虚拟机设计团队有意把类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为“类加载器”（Class Loader）。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Java虚拟机设计团队有意把类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为“类加载器”（Class Loader）。</p>
<!-- more -->
<h2 id="类与类加载器">类与类加载器</h2>
<p>类加载器只用来实现类的加载动作，但在他Java程序中起的作用却远超类加载阶段。 对于任意一个类，都必须由加载他的类加载器和类本身一起确定其在Java虚拟机中的唯一性，也就是说，比较两个类是否是相等的，只有在两个类是同一个类加载器加载的前提下才有意义，否则一定是不相等的。</p>
<h2 id="双亲委派模型">双亲委派模型</h2>
<p>在Java虚拟机的角度来看，只有两种类加载器，一种是启动类加载器(Bootstrap ClassLoader)，用C++实现，是虚拟机自身的一部分；另一种就是其他的类加载器，用Java语言实现，独立与虚拟机之外，而且全部都继承自java.lang.ClassLoader。</p>
<p>在Java开发人员的角度，类加载器应当划分的更细致，从JDK1.2以来，Java一致保持着三层类加载器，双亲委派的类加载结构。</p>
<p>启动类加载器负责加载存在与<code>&lt;JAVA_HOME&gt;\lib</code>目录或者被<code>-Xbootclasspath</code>参数指定的路径中存放的Java虚拟机能够识别的类库加载到虚拟机内存中。 启动类加载器无法被Java程序直接引用，所以当用户编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可，例如下面的代码。</p>
<p>扩展类加载器（Extension ClassLoader）：这个类负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，由于是Java语言实现的，所以开发者可以直接在程序中使用扩展类加载器来实现Class文件。</p>
<p>应用程序类加载器（Application Class Loader）这个类加载器是ClassLoader类的getSystemClassLoader方法的返回值，他负责加载用户类路径 ClassPath 上的所有类库，开发这可以直接在代码中使用这个类记载器，如果应用程序没有自定义自己的类加载器，一般情况下这个就是程序默认的类加载器。</p>
<p><img src="https://gaoliang.me/post-images/1584180378027.png" alt="" loading="lazy"><br>
图中展示的各种类加载器之间的层次关系被称为类加载器的双亲委派模型，双亲委派模型要求除了顶层的启动类加载器外，所有的加载器都有自己的父类加载器，但是这里加载器的关系并不是继承，而是通过组合关系来实现复用的。</p>
<p>双亲委派模型的工作过程是当一个类加载器收到加载请求时，他首先不会自己去尝试加载这个类，而是把这个请求传递委派给父类加载器去完成，每一个层级的类加载器都如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器，只有父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去完成加载。<br>
使用双亲委派模型的一个好处就是Java中的类随着类加载器一起有了优先级的层级关系，例如Java.lang.Object，他存放在rt.jar之中，无论哪个类加载器要加载这个类，最终都是委派给处于最顶端的启动类加载器进行加载，因此Object类在程序的各个类加载器环境中都能保证是一个类。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-类加载机制]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-lei-jia-zai-ji-zhi/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-lei-jia-zai-ji-zhi/">
        </link>
        <updated>2020-03-14T08:35:06.000Z</updated>
        <summary type="html"><![CDATA[<p>一个类型从被加载到虚拟机内从中，到卸载出内存，整个生命周期会经历加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initilization）、使用（Using）和卸载（Unloading）七个阶段，其中验证、准备、解析三个阶段被统称为连接（Linking）</p>
]]></summary>
        <content type="html"><![CDATA[<p>一个类型从被加载到虚拟机内从中，到卸载出内存，整个生命周期会经历加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initilization）、使用（Using）和卸载（Unloading）七个阶段，其中验证、准备、解析三个阶段被统称为连接（Linking）</p>
<!-- more -->
<h2 id="何时进行初始化">何时进行初始化？</h2>
<p>对于什么时候进行类的加载，java虚拟机规范并没有强制约束。但是对于初始化阶段，Java虚拟机规范则是严格规定了只有六种情况必须立即对类进行初始化（之前的步骤当然必须也要完成）</p>
<ol>
<li>遇到new、getstatic、putstatic、invokestatic这四条字节码时，如果类型没有初始化，则要先触发其初始化阶段。 对应的情况包括
<ul>
<li>使用new关键字实例化对象。</li>
<li>读取或者设置一个类的静态字段（被final修饰，已经在编译期间把结果放到常量池的静态字段除外）</li>
<li>调用一个类型的静态方法的时候。</li>
</ul>
</li>
<li>使用<code>java.lang.reflect</code>包的方法对类型进行反射调用时</li>
<li>当初始化类的时候，如果发现其父类还没有初始化，那么要先触发其父类的初始化</li>
<li>当虚拟机启动时，指定要执行的主类</li>
<li>当使用JDK 7新加入的动态语言支持时</li>
<li>当一个接口中定义了JDK8中新家入的默认方法时，如果有这个接口的实现类，那么这个接口要在其之前被初始化。</li>
</ol>
<p>对于这六种会初始化的常见，Java虚拟机规范中使用了一个非常强烈的限定语，&quot;有且只有&quot;，除此之外，所有引用类型的方法都不会触发初始化，被成为被动引用。 例如，</p>
<ol>
<li>被动使用例子1</li>
</ol>
<pre><code class="language-java">class SuperClass {

    static {
        System.out.println(&quot;SuperClass init!&quot;);
    }

    public static int value = 123;
}

class SubClass extends SuperClass {

    static {
        System.out.println(&quot;SubClass init!&quot;);
    }
}
public class NotInitialization_1 {

    public static void main(String[] args) {
        System.out.println(SubClass.value);
    }

}
</code></pre>
<p>运行这个这个例子，只会输出SuperClass init!，而不会输出SubClass init，这是由于，对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发夫类的初始化，而不会触发子类的初始化。<br>
2. 被动使用例子2 通过数组定义来引用类，不会触发此类的初始化</p>
<pre><code class="language-java">public class NotInitialization_2 {

    public static void main(String[] args) {
        SuperClass[] sca = new SuperClass[10];
    }

}
</code></pre>
<ol start="3">
<li>被动使用例子3 常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的</li>
</ol>
<pre><code class="language-java">public class ConstClass {

    static {
        System.out.println(&quot;ConstClass init!&quot;);
    }

    public static final String HELLOWORLD = &quot;hello world&quot;;
}

public class NotInitialization_3 {

    public static void main(String[] args) {
        System.out.println(ConstClass.HELLOWORLD);
    }
}
</code></pre>
<p>例子三是由于在编译阶段进行了常量传播优化，已经将此常量的值直接存储在了NotInitialization_3类的常量池中，后续对这个常量的引用实际都被转换为对NotInitialization_3类自身常量池的引用了。</p>
<p>此外，还有一个需要注意的，就是接口在初始化时，并不要求其父接口全部都完成初始化，只有在真正使用到父接口的时候，例如引用接口中定义的常量时，才会初始化。</p>
<h2 id="加载">加载</h2>
<p>java虚拟机在加载阶段需要做三件事</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<h2 id="验证">验证</h2>
<p>验证是连接阶段的第一步，用于确保class文件是符合java虚拟机规范的约束的。</p>
<ol>
<li>文件格式验证，这一阶段主要验证字节流是否符合class文件的格式。</li>
<li>元数据验证，这一极端会对字节码进行语义分析，验证的点包括这个类是否拥有父类、是否继承了不允许继承的类、如果是非抽象类是否实现了其父类或接口的方法、是否有与父类产生矛盾的字段和方法等。</li>
<li>字节码验证。<br>
字节码验证是整个验证过程中最复杂的一个阶段，主要目的是对数据流分析和控制流分析，确保予以是合法的，主要是对类的方法提，即class文件中的Code属性进行校验，确保校验类的方法不会再运行时做出危害虚拟机安全的行为。  JDK6后，javac和java虚拟机进行了一项联合优化，把尽可能多的校验挪到了javac中进行。具体做法是给Code属性的属性表中加了以”StackMapTable“的新属性，从而降低了运行时进行验证的耗时。</li>
<li>符号引用阶段<br>
这个验证实际发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三个阶段，即解析阶段中发生，主要校验符号引用通过字符串描述的全限定名是否能够找到对应的类、方法、字段，以及类、方法、字段的可访问行校验等。</li>
</ol>
<h2 id="准备">准备</h2>
<p>准备阶段是为类中定义的变量（即static变量）分配内存并设置初始化的阶段。从概念上来说，这些变量使用的内存应该在方法代中分配，但必须要注意到方法区本身是一个逻辑上的区域，JDK7之前，HotSpot使用永久代来实现方法区，而在JDK8之后，类变量则会随着class对象一起存放在java堆中，这时候类变量在方法去就完全是一个逻辑概念的表述了。</p>
<p>如果类字段属性表中存在ConstantValue属性，那么准备阶段变量值就会被初始化为ConstantValue所指定的初始化值。</p>
<h2 id="解析">解析</h2>
<p>解析阶段是将常量池中的符号引用转换为直接引用的过程，符号引用包括CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。</p>
<h3 id="符号引用symbolic-references">符号引用(Symbolic References)</h3>
<p>符号引用以一组符号来描述所引用的目标，符号可以是任何的字面量，只要能找到目标极客，符号引用与虚拟机内存分布无关，引用的目标不一定是加载到虚拟机内存中的内容。 各种虚拟机实现的内存布局可以不同，但是他们接收的符号引用一定是一致的。</p>
<h3 id="直接引用direct-references">直接引用(Direct References)</h3>
<p>直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。 他是和虚拟机内存布局有直接关联的，如果有了直接引用，那么被引用的目标一定已经在虚拟机的内存中存在了。</p>
<p>Java虚拟机没有规范解析阶段发生的具体时间。</p>
<h2 id="初始化">初始化</h2>
<p>初始化阶段会根据程序员通过编码制定的计划去初始化变量和其他资源，或者说，初始化阶段就是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程，这个方法并不是程序员直接在java代码中直接编写的，而是javac编译器的产物。</p>
<p><code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有类变量的赋值动作和静态程序语句块(<code>static{}</code>)中的语句合并产生的 ，编译器收集的顺序由语句在源文件中出现的顺序决定，静态块语句中只能访问到定义在静态块语句之前的变量，定义在他之后的变量，静态块语句可以复制，但是不能访问。例如</p>
<pre><code class="language-java">public class Test {
  static {
    i = 0; // 给变量复制可以正常编译通过
    System.out.print(i); // 这句编译器会提示“非法向前引用”
  }
  static int i = 1;
}
</code></pre>
<p><code>&lt;clinit&gt;()</code>方法并不需要显式的调用父类的构造方法，因为java虚拟机保证子类的<code>&lt;clinit&gt;()</code>执行之前，父类的<code>&lt;clinit&gt;()</code>方法必然已经执行过了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM从0到1-class文件属性表]]></title>
        <id>https://gaoliang.me/post/jvm-cong-0-dao-1-class-wen-jian-shu-xing-biao/</id>
        <link href="https://gaoliang.me/post/jvm-cong-0-dao-1-class-wen-jian-shu-xing-biao/">
        </link>
        <updated>2020-03-14T07:05:58.000Z</updated>
        <summary type="html"><![CDATA[<p>属性表（attribute_info）在前面的讲解中已经出现过多次，class文件、字段表、方法表都可以由自己携带的属性表集合，以描述某些场景专有的信息。虚拟机规范对属性表的限制稍微宽松一些，不要求各个属性具有严格顺序，而且只要不与已有属性崇明，任何人实现的编译其都可以向属性表中写入自己定义的属性信息，Java虚拟机运行时，会忽略它不认识的属性。</p>
]]></summary>
        <content type="html"><![CDATA[<p>属性表（attribute_info）在前面的讲解中已经出现过多次，class文件、字段表、方法表都可以由自己携带的属性表集合，以描述某些场景专有的信息。虚拟机规范对属性表的限制稍微宽松一些，不要求各个属性具有严格顺序，而且只要不与已有属性崇明，任何人实现的编译其都可以向属性表中写入自己定义的属性信息，Java虚拟机运行时，会忽略它不认识的属性。</p>
<!-- more -->
<p>对于每一个属性，他的名称都要从常量池中引用一个CONSTANT_Utf8_info类型的常量来表示，而属性值的结构是完全自定义的，只需要通过一个u4长度属性来表明属性值所占用的位数即可。<br>
<img src="https://gaoliang.me/post-images/1584160830127.png" alt="" loading="lazy"></p>
<p>截止到Java虚拟机规范的Java SE 12版本，预定义的属性项已经增加到了29项。详细见后面的表格</p>
<h2 id="code属性">Code属性</h2>
<p>Java程序的方法体经过Javac编译器处理后，最终转换为字节码存储在Code属性中，Code属性出现在方法表中的属性集合之中，但并非所有的方法表都必须有这个属性，比如接口和抽象类中的方法，就不存在Code属性，如果方法表有Code属性存在，那么他的结构如下<br>
<img src="https://gaoliang.me/post-images/1584169843802.png" alt="" loading="lazy"><br>
其中，第一个u2 attriibute_name_index，指向了常量池中的一个utf8类型常量的索引，此常量固定值为Code，attribute_length表示了属性值的长度。</p>
<p>max_stack代表了操作数栈深度的最大值，在方法执行的任意时刻，操作数栈都不会超过这个深度，虚拟机在运行时根据这个值来分配栈帧中的操作树栈深度。</p>
<p>max_locals代表了局部变量表所需的存储空间，在这里，max_locals的单位是槽(slot)，变量槽是虚拟机为局部变量分配内存的最小单位，对于byte、char、float、int、short、boolean和returnAddress等长度不超过32位的数据类型，每个局部变量占用一个变量槽，而double和long这种64位的数据类型则需要两个变量槽。 方法参数（包括实例方法中隐含的this）、显示异常处理程序的参数（在catch中定义的异常值）、方法体中定义的局部变量都依赖局部变量表来存放。  但是要注意，并不是方法中有多少个局部变量，就把这些局部变量表所占空间之和作为max_locals的值，操作数栈和局部变量表决定了一个方法的栈帧大小，不必要的数量会导致内存的浪费。 Java虚拟机的做法是将局部变量表的局部变量池进行重用，当代码执行超过一个局部变量的作用域时，这个局部变量所占用的局部变量槽可以被其他局部变量使用，javac编译器会根据变量的作用域来分配变量槽来给各个变量使用，然后根据同时生存的最大局部变量数和类型来计算出max_locals的大小。</p>
<p>code_length和code用来存储Java源程序编译后产生的字节码指令，code_length代表字节码长度，code是用于存储字节码指令的一系列字节流。虽然code_length是一个u4类型的长度值，也就是理论上可以达到2的32次幂，但是根据java虚拟机规范，一个方法不允许超过65535条字节码指令，即实际值使用到了u2的长度。</p>
<p>在字节码指令之后的是显式异常处理表，异常表对于Code属性来说并不是必须存在的。其结构如图<br>
<img src="https://gaoliang.me/post-images/1584171878583.png" alt="" loading="lazy"><br>
字段的含义为，当字节码从start_pc行到end_pc行之间出现了类型为catch_type或者其子类的异常时，则转到第handler_pc行继续处理。 当catch_type的值为0时，代表任意异常情况都需要转到handler_pc行进行处理。</p>
<h2 id="exceptions属性">Exceptions属性</h2>
<p>这个Exceptions属性是方法表中与Code属性同级的一项属性。作用是列举一个方法可能抛出的受检查异常（Checked Exceptions），也就是方法描述时，throws关键字后面列举的异常，其结构如下图<br>
<img src="https://gaoliang.me/post-images/1584173316961.png" alt="" loading="lazy"><br>
其中exception_index_table指向了常量池中CONSTANT_Class_info的索引。</p>
<h2 id="linenumbertable属性">LineNumberTable属性</h2>
<p>LineNumberTable属性是用于描述Java源代码行号和字节码行号之间关系的。他不是运行时必须的，可以通过javac的参数 -g参数进行取消或生成。 如果取消这个属性，最大的影响就是在运行时抛出的异常不会包含报错行号，在调试程序时也无法根据源码行号来设置断点。</p>
<h2 id="localvariabletable和localvariabletypetable属性">LocalVariableTable和LocalVariableTypeTable属性</h2>
<p>LocalVariableTable属性是用来描述栈帧中局部变量表的变量与java源码中定义的变量之间的关系，也不是运行时必须的属性，如果不生成，最大的影响是对IDE工具调试时无法根据参数名从上下文中获取参数值。</p>
<p>在JDK5引入泛型后，LocalVariableTable属性增加了一个姐妹属性，LocalVariableTypeTable，其结构与LocalVariableTable很相似，仅仅是把描述字段的字段描述符替换成了字段的特征签名。由于描述符中泛型参数化类型被擦除，描述符不能准确描述泛型类型了，因此出现了LocalVariableTypeTable属性，使用特征签名来完成泛型的描述。</p>
<h2 id="附录-预定义属性列表">附录 预定义属性列表</h2>
<p><img src="https://gaoliang.me/post-images/1584173919837.png" alt="" loading="lazy"><br>
<img src="https://gaoliang.me/post-images/1584173926306.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>