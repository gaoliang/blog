<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gaoliang.me</id>
    <title>高亮的杂货铺</title>
    <updated>2019-07-25T12:36:48.031Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gaoliang.me"/>
    <link rel="self" href="https://gaoliang.me/atom.xml"/>
    <subtitle>Happy coding!</subtitle>
    <logo>https://gaoliang.me/images/avatar.png</logo>
    <icon>https://gaoliang.me/favicon.ico</icon>
    <rights>All rights reserved 2019, 高亮的杂货铺</rights>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://gaoliang.me/post/hello-gridea</id>
        <link href="https://gaoliang.me/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 常用 API 总结]]></title>
        <id>https://gaoliang.me/post/redis-commonly-used-apis</id>
        <link href="https://gaoliang.me/post/redis-commonly-used-apis">
        </link>
        <updated>2018-04-15T12:29:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="常用基本命令">常用基本命令</h2>
<ul>
<li><code>keys [pattern]</code> 所有满足pattern的key，一般不用 O(n)</li>
<li><code>dbsize</code> 所有key的总数 O(1)</li>
<li><code>exists key</code> 检查key是否存在 O(1)</li>
<li><code>del key</code> 删除指定的key-value，可以删除多个 O(1)</li>
<li><code>expire key seconds</code> 设置key在seconds秒之后过期 O(1)</li>
<li><code>ttl key</code> 查询key剩余的过期时间 O(1)</li>
<li><code>persist key</code> 去掉过期时间，不再过期 O(1)</li>
<li><code>type key</code>  返回key的类型[string hash list set zset none] O(1)</li>
</ul>
<h2 id="数据结构api">数据结构API</h2>
<p>redis 对外的数据类型有 string，hash，list，set，sorted set，但对于同一种数据类型的不同键值对，其内部的编码方式可能不同。 我们可以用<code>OBJECT ENCODING key</code> 命令来查看对应的key的内部编码方式。</p>
<h3 id="string-字符串">string 字符串</h3>
<p>字符串类型的结构： key -&gt; value<br>
内部编码包括 raw, int, embstr<br>
常用API：</p>
<ul>
<li><code>get key</code> 获取key的value</li>
<li><code>getrange key start end</code> 获取子串</li>
<li><code>mget key1 key2 key3</code>  批量获取，为原子操作</li>
<li><code>set key value</code> 设置key为value</li>
<li><code>setnx key value</code> 当key不存在时，设置key为value</li>
<li><code>set key value xx</code> 当key存在时才设置</li>
<li><code>setrange key index value</code> 指定下标设置一个新的值</li>
<li><code>mset key1 value1 key2 value2</code> 批量设置值</li>
<li><code>getset key newvalue</code> 返回旧值并设置新值</li>
<li><code>append key value</code> 追加字符串</li>
<li><code>strlen key</code> 获取value的长度（字节数）O(1) 可得内部其实记录了字符串的长度。</li>
<li><code>del key</code> 删除</li>
<li><code>incr key</code>  +1</li>
<li><code>decr key</code> -1</li>
<li><code>incrby key k</code> +k</li>
<li><code>decrby key k</code> -k</li>
</ul>
<h3 id="hash-哈希">hash 哈希</h3>
<p>hash类型的结构: key==&gt;{filed1: value1 field2: value2 ... }  可以看做是一个关系型数据库的一张表，虽然不太恰当</p>
<p>特点： 其实像是个small redis，或者map map。 注意filed不能相同，value可以相同。</p>
<p>内部编码包括 hashtable, ziplist</p>
<p>常用API</p>
<ul>
<li><code>hget key field</code> 获取hash key的field字段值</li>
<li><code>hmget key field1 field2 field3...</code> 一次获取多个filed的值</li>
<li><code>hset key field value</code> 设置hash key的filed字段值为value</li>
<li><code>hmset key field1 value1 filed2 value2 ...</code> 一次设置多个值</li>
<li><code>hdel key field</code> 删除</li>
<li><code>hexists key field</code> 判断hash key是否有field</li>
<li><code>hlen key</code> 获取hash key有多少个字段</li>
<li><code>hgetall key</code> 获取key中所有对应的field和value PS. 小心使用下面这三个命令</li>
<li><code>hvals key</code> 返回hash key中所有field的values</li>
<li><code>hkeys key</code> 返回hash key对应的所有的field</li>
</ul>
<p>可以发现，很多的API都是可以和string类型对应起来的，很多时候只是加了个h</p>
<h3 id="list-列表">list 列表</h3>
<p>list类型的结构: key==&gt;elements[a,b,c,...]<br>
特点： 有序，可重复，双端操作<br>
内部编码：linkedlist, ziplist<br>
常用API:</p>
<ul>
<li><code>rpush key value1 value2 ...</code> 从右端插入值,同样还有<code>lpush</code></li>
<li><code>rpop key</code> 从列表右端弹出一个item,同样的还有<code>lpop</code></li>
<li><code>linsert key before|after value newValue</code> 在list的指定值前插入newValue</li>
<li><code>lrem key count value</code>  根据count值，从列表中删除所有value相等的项，如果count&gt;0 则从左到右删除， 如果count&lt;0 则从右往左删，如果count=0，则删除全部value值</li>
<li><code>lrange key start end</code> 获取列表指定索引范围内的所有item，注意包含end，且支持负索引</li>
<li><code>ltrim key start end</code> 按照索引范围修剪列表</li>
<li><code>llen key</code> 获取列表的长度</li>
<li><code>lset key index newValue</code> 设置列表指定索引值为newValue</li>
<li><code>brpop key timeout</code> 在没有元素时，阻塞直到有元素能够pop，类似的还有<code>blpop</code>,在做消息队列的时候会很有用</li>
</ul>
<h3 id="set-集合">set 集合</h3>
<p>set类型的结构 key==&gt; {a,b,c,d}<br>
特点：无序，不可重复，支持集合间操作<br>
内部编码：hashtable intset</p>
<h4 id="集合内的api">集合内的API：</h4>
<ul>
<li><code>sadd key element1 element2 ...</code> 添加元素，如果存在则添加失败 O(1)</li>
<li><code>srem key element1 element2 ...</code> 移除元素 O(1)</li>
<li><code>scard key</code> 计算集合的大小</li>
<li><code>sismember key element</code> 判断是否在集合中</li>
<li><code>srandmember key count</code> 从集合中随机挑选count个元素，不会破坏集合</li>
<li><code>spop key</code> 从集合中随机弹出一个元素，注意是弹出，元素就从集合中移除了</li>
<li><code>smembers key</code> 所有元素，注意可能会导致阻塞，小心使用</li>
</ul>
<h4 id="集合间的api">集合间的API</h4>
<ul>
<li><code>sdiff key1 key2</code> 获取差集</li>
<li><code>sinter key1 key2</code> 获取交集</li>
<li><code>sunion key1 key</code> 获取并集</li>
</ul>
<h3 id="sorted-set-zset-有序集合">sorted set (zset) 有序集合</h3>
<p>set类型的结构 key==&gt; {score1:value1, score2:value2, ...}<br>
特点：有序，不可重复<br>
内部编码：skiplist ziplist<br>
常用API:</p>
<ul>
<li><code>zadd key score element</code> 注意score可以重复，但element不可以重复,时间复杂度为O(logN)</li>
<li><code>zrem key element</code> 删除，复杂度为O(1)</li>
<li><code>zscore key elment</code> 获取score</li>
<li><code>zincrby key increSocre elemnt</code> 增加指定元素的score</li>
<li><code>zcard key</code> 获取元素个数 时间复杂度为O(1)</li>
<li><code>zrank key element</code> 获取元素的排名</li>
<li><code>zrange key start end [WITHSCORES]</code> 返回指定排名范围的元素，并指定是否返回分数，时间复杂度为O(log(n) + m)</li>
<li><code>zrangebyscore key start end [WITHSCORES]</code> 返回指定score范围的元素，并指定是否返回分数，时间复杂度为O(log(n) + m)</li>
<li><code>zount key minScore maxScore</code> 返回指定score范围的元素个数，时间复杂度为O(log(n) + m)</li>
<li><code>zremrangebyrank key start end</code> 删除指定排名范围的元素 时间复杂度为O(log(n) + m)</li>
<li><code>zremrangebyscore key start end</code> 删除指定score范围的元素 时间复杂度为O(log(n) + m)</li>
</ul>
<h2 id="一些问题">一些问题</h2>
<h3 id="为什么单线程还这么快">为什么单线程还这么快？</h3>
<ol>
<li>纯内存操作</li>
<li>采用非阻塞IO, 内部io模型利用epoll并进行了优化</li>
<li>没有线程的切换，没有线程切换和竞态消耗</li>
</ol>
<h3 id="怎样避免单线程导致的阻塞问题">怎样避免单线程导致的阻塞问题？</h3>
<p>拒绝长慢命令，包括keys, flushall, flushdb等，不要在线上执行</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 的持久化机制]]></title>
        <id>https://gaoliang.me/post/how-redis-do-persistence</id>
        <link href="https://gaoliang.me/post/how-redis-do-persistence">
        </link>
        <updated>2018-04-14T12:06:36.000Z</updated>
        <summary type="html"><![CDATA[<p>Redis 的持久化（Persistence）机制可以有效避免 redis 服务器在遇到故障时数据丢失的问题，发生故障重启后重新载入持久化的内容就可以恢复数据。redis 有两种持久化机制 RDB 和 AOF。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Redis 的持久化（Persistence）机制可以有效避免 redis 服务器在遇到故障时数据丢失的问题，发生故障重启后重新载入持久化的内容就可以恢复数据。redis 有两种持久化机制 RDB 和 AOF。</p>
<!-- more -->
<h2 id="持久化的一些概念">持久化的一些概念</h2>
<p>持久化一般有两种实现方式，一种是类似 MySQL 的 dump 命令的快照方式，这种方式每次调用会将数据库中的全部内容都一次性写入到硬盘中，恢复的时候也可以一次性将全部数据恢复出来。 另一种则是类似于 MySQL 的 Binlog 的方式，每当数据库内容更新时，记录下所有写操作的执行，恢复时，按照日志的顺序把所有的操作再执行一遍就可以恢复原来的数据。</p>
<h2 id="rdbredis-database-快照方式">RDB（Redis DataBase) 快照方式</h2>
<p>RDB 是利用快照实现的一种持久化技术，在 redis 中，内存中的数据经过 RDB 持久化后，会被保存到硬盘上的RDB二进制文件中，当我们需要恢复数据时，重新加载到内存中即可。 在进行快照时，如果系统中存在陈旧的快照，那么 RDB 会先新建快照，完成后再替换陈旧的快照。 每次持久化的时间复杂度为 O(n)。</p>
<h3 id="rdb-的触发方式">RDB 的触发方式</h3>
<h4 id="save-和-bgsave">save 和 bgsave</h4>
<p>save 和 bgsave 都可以通过用户主动调用的方式来完成数据的持久化，区别是save 是一个同步命令，执行时会阻塞 redis 的主线程，而 redis 又是单进程单线程的，这就会导致 save 执行的过程中，其他的指令只能排队阻塞等待执行。 bgsave 则是通过 fork() 系统调用新建一个子进程在后台完成数据持久化任务，不会阻塞主线程。<br>
他们的主要区别如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>save</th>
<th>bgsave</th>
</tr>
</thead>
<tbody>
<tr>
<td>阻塞？</td>
<td>是</td>
<td>是(调用 fork() 时)</td>
</tr>
<tr>
<td>优点</td>
<td>不需要额外消耗内存</td>
<td>不会阻塞客户端其他命令</td>
</tr>
<tr>
<td>缺点</td>
<td>需要阻塞，部分场景不允许</td>
<td>fork消耗系统资源</td>
</tr>
</tbody>
</table>
<h4 id="自动触发">自动触发</h4>
<p>redis 会根据配置文件自动触发 bgsave 命令完成数据的持久化，通常情况下在 redis.conf 文件中我们会看到下面这样的配置项</p>
<pre><code>save 900 1
save 300 10
save 60 10000
</code></pre>
<p>save N M表示在 N 秒之内，redis 至少发生 M 次修改则 redis 抓快照到磁盘。 这个三条记录只要有一个满足要求就执行 bgsave 命令。一般项目中不启用自动触发</p>
<h4 id="其他的触发方式容易忽略的">其他的触发方式（容易忽略的）</h4>
<ul>
<li>全量复制（如主从复制时）</li>
<li>debug reload</li>
<li>shutdown</li>
</ul>
<h2 id="aofappend-only-file-日志方式">AOF（Append Only File） 日志方式</h2>
<p>RDB出现的问题：</p>
<ol>
<li>时间复杂度为O(n)，耗时耗性能</li>
<li>不可控，丢失数据，只有固定的时间点的数据会被持久化</li>
</ol>
<p>AOF的原理： 其实就是记录每一条命令，不过是保存在专有的 AOF 格式。AOF 的写入几乎是实时的。</p>
<h3 id="aof-的写入策略">AOF 的写入策略</h3>
<p>从内存中将数据复制到硬盘扇区是一项较为耗时的操作，redis 的 AOF 为我们提供了三种决定写入时机的策略，分别是 always, everysec 和 no。</p>
<h4 id="always-策略">always 策略</h4>
<p>每次执行命令都会调用 fsync 将命令写入到日志文件中，大数据量时非常慢但是十分安全。这种方式 IO 开销很大，对于一般的 sata 盘只有几百 TPS。</p>
<h4 id="everysec-策略">everysec 策略</h4>
<p>每秒将 redis 缓冲区中缓存的命令调用 fsync 写入到 aof 日志文件中，速度快了很多但是可能会丢失最近一秒的数据。</p>
<h4 id="no-策略">no 策略</h4>
<p>操作系统决定何时应该刷新，不可控</p>
<h3 id="aof-重写">AOF 重写</h3>
<p>当我们写入的命令很多之后，aof文件就会变得非常大，为了尽可能优化aof文件的大小，加快恢复的速度，会对aof文件进行重写。</p>
<h4 id="aof-重写的两种方式">AOF 重写的两种方式</h4>
<ol>
<li>bgrewriteaof 命令（利用fork异步进行）</li>
<li>自动重写，有两个配置项，auto-aof-rewrite-min-size，表示需要进行重写的尺寸和 auto-aof-rewrite-percentage，表示aof文件的增长率。同时满足两个条件时则 redis 会自动进行重写。</li>
</ol>
<h2 id="rdb-和-aof-的对比">RDB 和 AOF 的对比</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>RDB</th>
<th>AOF</th>
</tr>
</thead>
<tbody>
<tr>
<td>恢复优先级</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>体积</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>恢复速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>数据安全性</td>
<td>丢数据</td>
<td>根据策略决定</td>
</tr>
<tr>
<td>轻重</td>
<td>重</td>
<td>轻</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
</feed>